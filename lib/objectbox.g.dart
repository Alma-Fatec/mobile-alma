// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/models/box/assignment_box.dart';
import 'src/models/box/class_block_box.dart';
import 'src/models/box/class_room_box.dart';
import 'src/models/box/option_box.dart';
import 'src/models/box/user_box.dart';
import 'src/models/box/user_metadata.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3765896188234849290),
      name: 'ClassBlockBox',
      lastPropertyId: const IdUid(5, 1821304955009629013),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6142546962272566599),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1846996827073353650),
            name: 'classBlockId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8952505259596391258),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7332872408017712479),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1821304955009629013),
            name: 'cover',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6951839036665688230),
      name: 'ClassRoomBox',
      lastPropertyId: const IdUid(7, 4061861884364234275),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 571557948326391507),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5970716554389500008),
            name: 'classRoomId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7958192956657003257),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3358894227753285356),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7834887055807490032),
            name: 'order',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 480309143844900791),
            name: 'cover',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 4224225516612452298),
      name: 'UserBox',
      lastPropertyId: const IdUid(3, 2404439345539993506),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5020629910700859759),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 595137873485257633),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2404439345539993506),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 6722806348148172995),
      name: 'AssignmentBox',
      lastPropertyId: const IdUid(9, 2632720628865796852),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4159337404413621187),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9157920191047628902),
            name: 'assignmentId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2469276123600399511),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3995476091169742776),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4654751871341379823),
            name: 'file',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4218888043596506399),
            name: 'answer',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1717203354660007701),
            name: 'hiddenText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1518395386160821132),
            name: 'kind',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2632720628865796852),
            name: 'done',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 2237150591293992667),
      name: 'UserMetadata',
      lastPropertyId: const IdUid(5, 6678474132952065073),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6650293430494006358),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7743639078205677812),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3233222037140198436),
            name: 'currentBlockId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7074430788602186874),
            name: 'lastClassId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6678474132952065073),
            name: 'lastAssignmentId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 8455742398924132228),
      name: 'OptionBox',
      lastPropertyId: const IdUid(4, 5577026965234778934),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2839966423412621306),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6387569605410666831),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4668364613087819883),
            name: 'file',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5577026965234778934),
            name: 'isCorrect',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 8455742398924132228),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [4061861884364234275],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ClassBlockBox: EntityDefinition<ClassBlockBox>(
        model: _entities[0],
        toOneRelations: (ClassBlockBox object) => [],
        toManyRelations: (ClassBlockBox object) => {},
        getId: (ClassBlockBox object) => object.id,
        setId: (ClassBlockBox object, int id) {
          object.id = id;
        },
        objectToFB: (ClassBlockBox object, fb.Builder fbb) {
          final classBlockIdOffset = object.classBlockId == null
              ? null
              : fbb.writeString(object.classBlockId!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final coverOffset =
              object.cover == null ? null : fbb.writeString(object.cover!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, classBlockIdOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addOffset(4, coverOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ClassBlockBox(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              classBlockId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              cover: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12));

          return object;
        }),
    ClassRoomBox: EntityDefinition<ClassRoomBox>(
        model: _entities[1],
        toOneRelations: (ClassRoomBox object) => [],
        toManyRelations: (ClassRoomBox object) => {},
        getId: (ClassRoomBox object) => object.id,
        setId: (ClassRoomBox object, int id) {
          object.id = id;
        },
        objectToFB: (ClassRoomBox object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final coverOffset =
              object.cover == null ? null : fbb.writeString(object.cover!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.classRoomId);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addInt64(4, object.order);
          fbb.addOffset(5, coverOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ClassRoomBox(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              classRoomId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 6),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              order: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 12),
              cover: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14));

          return object;
        }),
    UserBox: EntityDefinition<UserBox>(
        model: _entities[2],
        toOneRelations: (UserBox object) => [],
        toManyRelations: (UserBox object) => {},
        getId: (UserBox object) => object.id,
        setId: (UserBox object, int id) {
          object.id = id;
        },
        objectToFB: (UserBox object, fb.Builder fbb) {
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, userIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserBox(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8));

          return object;
        }),
    AssignmentBox: EntityDefinition<AssignmentBox>(
        model: _entities[3],
        toOneRelations: (AssignmentBox object) => [],
        toManyRelations: (AssignmentBox object) => {},
        getId: (AssignmentBox object) => object.id,
        setId: (AssignmentBox object, int id) {
          object.id = id;
        },
        objectToFB: (AssignmentBox object, fb.Builder fbb) {
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final fileOffset =
              object.file == null ? null : fbb.writeString(object.file!);
          final answerOffset =
              object.answer == null ? null : fbb.writeString(object.answer!);
          final hiddenTextOffset = object.hiddenText == null
              ? null
              : fbb.writeString(object.hiddenText!);
          final kindOffset =
              object.kind == null ? null : fbb.writeString(object.kind!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addInt64(1, object.assignmentId);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addOffset(4, fileOffset);
          fbb.addOffset(5, answerOffset);
          fbb.addOffset(6, hiddenTextOffset);
          fbb.addOffset(7, kindOffset);
          fbb.addBool(8, object.done);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AssignmentBox(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              assignmentId: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 6),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              file: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              answer: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              hiddenText: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              kind: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18))
            ..done =
                const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);

          return object;
        }),
    UserMetadata: EntityDefinition<UserMetadata>(
        model: _entities[4],
        toOneRelations: (UserMetadata object) => [],
        toManyRelations: (UserMetadata object) => {},
        getId: (UserMetadata object) => object.id,
        setId: (UserMetadata object, int id) {
          object.id = id;
        },
        objectToFB: (UserMetadata object, fb.Builder fbb) {
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          final currentBlockIdOffset = object.currentBlockId == null
              ? null
              : fbb.writeString(object.currentBlockId!);
          final lastClassIdOffset = object.lastClassId == null
              ? null
              : fbb.writeString(object.lastClassId!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, userIdOffset);
          fbb.addOffset(2, currentBlockIdOffset);
          fbb.addOffset(3, lastClassIdOffset);
          fbb.addInt64(4, object.lastAssignmentId);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserMetadata(
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              currentBlockId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8))
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4)
            ..lastClassId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..lastAssignmentId = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 12);

          return object;
        }),
    OptionBox: EntityDefinition<OptionBox>(
        model: _entities[5],
        toOneRelations: (OptionBox object) => [],
        toManyRelations: (OptionBox object) => {},
        getId: (OptionBox object) => object.id,
        setId: (OptionBox object, int id) {
          object.id = id;
        },
        objectToFB: (OptionBox object, fb.Builder fbb) {
          final textOffset =
              object.text == null ? null : fbb.writeString(object.text!);
          final fileOffset =
              object.file == null ? null : fbb.writeString(object.file!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, textOffset);
          fbb.addOffset(2, fileOffset);
          fbb.addBool(3, object.isCorrect);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OptionBox(
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              text: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              file: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              isCorrect: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 10));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ClassBlockBox] entity fields to define ObjectBox queries.
class ClassBlockBox_ {
  /// see [ClassBlockBox.id]
  static final id =
      QueryIntegerProperty<ClassBlockBox>(_entities[0].properties[0]);

  /// see [ClassBlockBox.classBlockId]
  static final classBlockId =
      QueryStringProperty<ClassBlockBox>(_entities[0].properties[1]);

  /// see [ClassBlockBox.title]
  static final title =
      QueryStringProperty<ClassBlockBox>(_entities[0].properties[2]);

  /// see [ClassBlockBox.description]
  static final description =
      QueryStringProperty<ClassBlockBox>(_entities[0].properties[3]);

  /// see [ClassBlockBox.cover]
  static final cover =
      QueryStringProperty<ClassBlockBox>(_entities[0].properties[4]);
}

/// [ClassRoomBox] entity fields to define ObjectBox queries.
class ClassRoomBox_ {
  /// see [ClassRoomBox.id]
  static final id =
      QueryIntegerProperty<ClassRoomBox>(_entities[1].properties[0]);

  /// see [ClassRoomBox.classRoomId]
  static final classRoomId =
      QueryIntegerProperty<ClassRoomBox>(_entities[1].properties[1]);

  /// see [ClassRoomBox.name]
  static final name =
      QueryStringProperty<ClassRoomBox>(_entities[1].properties[2]);

  /// see [ClassRoomBox.description]
  static final description =
      QueryStringProperty<ClassRoomBox>(_entities[1].properties[3]);

  /// see [ClassRoomBox.order]
  static final order =
      QueryIntegerProperty<ClassRoomBox>(_entities[1].properties[4]);

  /// see [ClassRoomBox.cover]
  static final cover =
      QueryStringProperty<ClassRoomBox>(_entities[1].properties[5]);
}

/// [UserBox] entity fields to define ObjectBox queries.
class UserBox_ {
  /// see [UserBox.id]
  static final id = QueryIntegerProperty<UserBox>(_entities[2].properties[0]);

  /// see [UserBox.userId]
  static final userId =
      QueryStringProperty<UserBox>(_entities[2].properties[1]);

  /// see [UserBox.name]
  static final name = QueryStringProperty<UserBox>(_entities[2].properties[2]);
}

/// [AssignmentBox] entity fields to define ObjectBox queries.
class AssignmentBox_ {
  /// see [AssignmentBox.id]
  static final id =
      QueryIntegerProperty<AssignmentBox>(_entities[3].properties[0]);

  /// see [AssignmentBox.assignmentId]
  static final assignmentId =
      QueryIntegerProperty<AssignmentBox>(_entities[3].properties[1]);

  /// see [AssignmentBox.title]
  static final title =
      QueryStringProperty<AssignmentBox>(_entities[3].properties[2]);

  /// see [AssignmentBox.description]
  static final description =
      QueryStringProperty<AssignmentBox>(_entities[3].properties[3]);

  /// see [AssignmentBox.file]
  static final file =
      QueryStringProperty<AssignmentBox>(_entities[3].properties[4]);

  /// see [AssignmentBox.answer]
  static final answer =
      QueryStringProperty<AssignmentBox>(_entities[3].properties[5]);

  /// see [AssignmentBox.hiddenText]
  static final hiddenText =
      QueryStringProperty<AssignmentBox>(_entities[3].properties[6]);

  /// see [AssignmentBox.kind]
  static final kind =
      QueryStringProperty<AssignmentBox>(_entities[3].properties[7]);

  /// see [AssignmentBox.done]
  static final done =
      QueryBooleanProperty<AssignmentBox>(_entities[3].properties[8]);
}

/// [UserMetadata] entity fields to define ObjectBox queries.
class UserMetadata_ {
  /// see [UserMetadata.id]
  static final id =
      QueryIntegerProperty<UserMetadata>(_entities[4].properties[0]);

  /// see [UserMetadata.userId]
  static final userId =
      QueryStringProperty<UserMetadata>(_entities[4].properties[1]);

  /// see [UserMetadata.currentBlockId]
  static final currentBlockId =
      QueryStringProperty<UserMetadata>(_entities[4].properties[2]);

  /// see [UserMetadata.lastClassId]
  static final lastClassId =
      QueryStringProperty<UserMetadata>(_entities[4].properties[3]);

  /// see [UserMetadata.lastAssignmentId]
  static final lastAssignmentId =
      QueryIntegerProperty<UserMetadata>(_entities[4].properties[4]);
}

/// [OptionBox] entity fields to define ObjectBox queries.
class OptionBox_ {
  /// see [OptionBox.id]
  static final id = QueryIntegerProperty<OptionBox>(_entities[5].properties[0]);

  /// see [OptionBox.text]
  static final text =
      QueryStringProperty<OptionBox>(_entities[5].properties[1]);

  /// see [OptionBox.file]
  static final file =
      QueryStringProperty<OptionBox>(_entities[5].properties[2]);

  /// see [OptionBox.isCorrect]
  static final isCorrect =
      QueryBooleanProperty<OptionBox>(_entities[5].properties[3]);
}
